Hello, I am Luca `fero(da)` Ferroni,

I am the author of foreign key time-aware feature for `history` django application.
Marty Alchin does the initial (and great) work for
`history`.

I have just given my 2 cent.

HOW HISTORY APPLICATION WORKS:

Marty wrote some code that lets Django create one HistoricalModel for each model
which defines an HistoricalRecords field. The HistoricalModel is quite a copy of
the original model, and it adds some fields to keep track of:

* user who made the change
* datetime when change occurred
* type of change occurred (add, modify, delete)

Then Marty makes use of Django signals to update HistoricalModel on each change
of original model record (add, modify, delete as i said before).

You can retrieve historical records with methods as_of and most_recent.
For my implementation I tested only as_of.

WHAT I HAVE DONE

I annotated some bugs/features (it depends from the point-of-view :) ) in BUGS. And I fixed the ones which relates to time-aware ForeignKey.

Bug #2 is my goal for the exam in FOSSET Master .

I created related.py module for HistoricalForeingKey field and descriptor,
inspiring me from django/db/models/related.py

Then I patched HistoryManager (history/manager.py)
in a way that as_of method does not return original model instances,
but creates new time-aware models on the fly 
because I need to replace related ForeignKey fields with my 
HistoricalForeignKey fields and descriptor.

In this way, whenever you access an HistoricalForeignKey field of a
TimeAwareModel instance, you retrieve the non time aware foreign key 
and you apply the as_of to the fkinstance retrieved.

This can be done if the fkmodel defines its own HistoricalRecords field.
The user can set arbitrary name for HistoricalRecords field,
that's why there is another patch in history/models.py which
set a known '_default_history' attribute in each original model which
has an HistoricalRecords field.

Another patch in history/models.py solves bug #3,
and make some adjustement if related_name has been specified in a ForeignKey.

In the end I wrote a demo `school` application and the story you find in DEMOSTORY.


